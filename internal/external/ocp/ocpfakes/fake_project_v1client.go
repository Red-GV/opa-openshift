// Code generated by counterfeiter. DO NOT EDIT.
package ocpfakes

import (
	"sync"

	"github.com/observatorium/opa-openshift/internal/external/ocp"
	v1 "github.com/openshift/client-go/project/clientset/versioned/typed/project/v1"
)

type FakeProjectV1Client struct {
	ProjectsStub        func() v1.ProjectInterface
	projectsMutex       sync.RWMutex
	projectsArgsForCall []struct {
	}
	projectsReturns struct {
		result1 v1.ProjectInterface
	}
	projectsReturnsOnCall map[int]struct {
		result1 v1.ProjectInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProjectV1Client) Projects() v1.ProjectInterface {
	fake.projectsMutex.Lock()
	ret, specificReturn := fake.projectsReturnsOnCall[len(fake.projectsArgsForCall)]
	fake.projectsArgsForCall = append(fake.projectsArgsForCall, struct {
	}{})
	stub := fake.ProjectsStub
	fakeReturns := fake.projectsReturns
	fake.recordInvocation("Projects", []interface{}{})
	fake.projectsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProjectV1Client) ProjectsCallCount() int {
	fake.projectsMutex.RLock()
	defer fake.projectsMutex.RUnlock()
	return len(fake.projectsArgsForCall)
}

func (fake *FakeProjectV1Client) ProjectsCalls(stub func() v1.ProjectInterface) {
	fake.projectsMutex.Lock()
	defer fake.projectsMutex.Unlock()
	fake.ProjectsStub = stub
}

func (fake *FakeProjectV1Client) ProjectsReturns(result1 v1.ProjectInterface) {
	fake.projectsMutex.Lock()
	defer fake.projectsMutex.Unlock()
	fake.ProjectsStub = nil
	fake.projectsReturns = struct {
		result1 v1.ProjectInterface
	}{result1}
}

func (fake *FakeProjectV1Client) ProjectsReturnsOnCall(i int, result1 v1.ProjectInterface) {
	fake.projectsMutex.Lock()
	defer fake.projectsMutex.Unlock()
	fake.ProjectsStub = nil
	if fake.projectsReturnsOnCall == nil {
		fake.projectsReturnsOnCall = make(map[int]struct {
			result1 v1.ProjectInterface
		})
	}
	fake.projectsReturnsOnCall[i] = struct {
		result1 v1.ProjectInterface
	}{result1}
}

func (fake *FakeProjectV1Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.projectsMutex.RLock()
	defer fake.projectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProjectV1Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ocp.ProjectV1Client = new(FakeProjectV1Client)
