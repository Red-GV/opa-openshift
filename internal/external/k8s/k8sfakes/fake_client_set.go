// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"github.com/observatorium/opa-openshift/internal/external/k8s"
	v1 "k8s.io/client-go/kubernetes/typed/authentication/v1"
	v1a "k8s.io/client-go/kubernetes/typed/authorization/v1"
)

type FakeClientSet struct {
	AuthenticationV1Stub        func() v1.AuthenticationV1Interface
	authenticationV1Mutex       sync.RWMutex
	authenticationV1ArgsForCall []struct {
	}
	authenticationV1Returns struct {
		result1 v1.AuthenticationV1Interface
	}
	authenticationV1ReturnsOnCall map[int]struct {
		result1 v1.AuthenticationV1Interface
	}
	AuthorizationV1Stub        func() v1a.AuthorizationV1Interface
	authorizationV1Mutex       sync.RWMutex
	authorizationV1ArgsForCall []struct {
	}
	authorizationV1Returns struct {
		result1 v1a.AuthorizationV1Interface
	}
	authorizationV1ReturnsOnCall map[int]struct {
		result1 v1a.AuthorizationV1Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientSet) AuthenticationV1() v1.AuthenticationV1Interface {
	fake.authenticationV1Mutex.Lock()
	ret, specificReturn := fake.authenticationV1ReturnsOnCall[len(fake.authenticationV1ArgsForCall)]
	fake.authenticationV1ArgsForCall = append(fake.authenticationV1ArgsForCall, struct {
	}{})
	stub := fake.AuthenticationV1Stub
	fakeReturns := fake.authenticationV1Returns
	fake.recordInvocation("AuthenticationV1", []interface{}{})
	fake.authenticationV1Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientSet) AuthenticationV1CallCount() int {
	fake.authenticationV1Mutex.RLock()
	defer fake.authenticationV1Mutex.RUnlock()
	return len(fake.authenticationV1ArgsForCall)
}

func (fake *FakeClientSet) AuthenticationV1Calls(stub func() v1.AuthenticationV1Interface) {
	fake.authenticationV1Mutex.Lock()
	defer fake.authenticationV1Mutex.Unlock()
	fake.AuthenticationV1Stub = stub
}

func (fake *FakeClientSet) AuthenticationV1Returns(result1 v1.AuthenticationV1Interface) {
	fake.authenticationV1Mutex.Lock()
	defer fake.authenticationV1Mutex.Unlock()
	fake.AuthenticationV1Stub = nil
	fake.authenticationV1Returns = struct {
		result1 v1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeClientSet) AuthenticationV1ReturnsOnCall(i int, result1 v1.AuthenticationV1Interface) {
	fake.authenticationV1Mutex.Lock()
	defer fake.authenticationV1Mutex.Unlock()
	fake.AuthenticationV1Stub = nil
	if fake.authenticationV1ReturnsOnCall == nil {
		fake.authenticationV1ReturnsOnCall = make(map[int]struct {
			result1 v1.AuthenticationV1Interface
		})
	}
	fake.authenticationV1ReturnsOnCall[i] = struct {
		result1 v1.AuthenticationV1Interface
	}{result1}
}

func (fake *FakeClientSet) AuthorizationV1() v1a.AuthorizationV1Interface {
	fake.authorizationV1Mutex.Lock()
	ret, specificReturn := fake.authorizationV1ReturnsOnCall[len(fake.authorizationV1ArgsForCall)]
	fake.authorizationV1ArgsForCall = append(fake.authorizationV1ArgsForCall, struct {
	}{})
	stub := fake.AuthorizationV1Stub
	fakeReturns := fake.authorizationV1Returns
	fake.recordInvocation("AuthorizationV1", []interface{}{})
	fake.authorizationV1Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientSet) AuthorizationV1CallCount() int {
	fake.authorizationV1Mutex.RLock()
	defer fake.authorizationV1Mutex.RUnlock()
	return len(fake.authorizationV1ArgsForCall)
}

func (fake *FakeClientSet) AuthorizationV1Calls(stub func() v1a.AuthorizationV1Interface) {
	fake.authorizationV1Mutex.Lock()
	defer fake.authorizationV1Mutex.Unlock()
	fake.AuthorizationV1Stub = stub
}

func (fake *FakeClientSet) AuthorizationV1Returns(result1 v1a.AuthorizationV1Interface) {
	fake.authorizationV1Mutex.Lock()
	defer fake.authorizationV1Mutex.Unlock()
	fake.AuthorizationV1Stub = nil
	fake.authorizationV1Returns = struct {
		result1 v1a.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeClientSet) AuthorizationV1ReturnsOnCall(i int, result1 v1a.AuthorizationV1Interface) {
	fake.authorizationV1Mutex.Lock()
	defer fake.authorizationV1Mutex.Unlock()
	fake.AuthorizationV1Stub = nil
	if fake.authorizationV1ReturnsOnCall == nil {
		fake.authorizationV1ReturnsOnCall = make(map[int]struct {
			result1 v1a.AuthorizationV1Interface
		})
	}
	fake.authorizationV1ReturnsOnCall[i] = struct {
		result1 v1a.AuthorizationV1Interface
	}{result1}
}

func (fake *FakeClientSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authenticationV1Mutex.RLock()
	defer fake.authenticationV1Mutex.RUnlock()
	fake.authorizationV1Mutex.RLock()
	defer fake.authorizationV1Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.ClientSet = new(FakeClientSet)
